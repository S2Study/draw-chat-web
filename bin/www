#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('draw-chat-web:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || 3000);
app.set('port', port);

/**
 * Create HTTP server.
 */
var server = http.createServer(app);


/**
 * Listen on provided port, on all network interfaces.
 */
//サーバーを立ち上げたら実行
server.listen(app.get('port'), function() {
  console.log('listening!!! *:' + app.get('port'));
});
// server.listen(port);
server.on('error', onError);
server.on('listening', onListening);


//ソケットIOのモジュールを実行。（実はこの中でcreateServerしてlistenしている）
//サーバーをlistenしてsocketIOを設定
var io = require('socket.io')(server);

//socket処理を記載する
var roomList = new Object();
var defaultRoom = "みんなの広場";
roomList[defaultRoom] = 0;

io.on('connection', function(socket){

  socket.on('init', function(room){
    socket.join(defaultRoom);
    io.sockets.emit("room in", {name: defaultRoom});

    var member = roomList[defaultRoom];
    roomList[defaultRoom] = member+1;
    console.log("#########");
    console.log(socket.rooms);
    console.log(roomList);
    console.log(roomList[defaultRoom]);
    console.log("#########");
    io.sockets.emit("port", {value: roomList[defaultRoom]});
  });

  socket.on('join room', function(room){
    console.log('join room: ' + room);
    socket.join(room);
  });

  socket.on("enter", function(data2){
    var data2name = htmlspecialchars(data2.value);
    //ルーム作成orルーム入室イベントが起きる。XSSを回避
    if(!roomList[data2name]){
      //ルームが作られていない場合

      roomList[data2name] = 1;
      console.log(data2name + "番ルームが作られました。" + roomList[data2name] + "人います。" );

      socket.set('room', data2name);
      socket.join(data2name);

      io.sockets.to(data2name).emit('message', data2name + "に入室しました");

      io.sockets.emit("roomList", roomList);

    }else if(roomList[data2name]){
      if(roomList[data2name] >= 1 && roomList[data2name] < 4){
        //ルームが作られていて、人数が1～3人の場合
        roomList[data2name]++;

        console.log(data2name+ "番ルームに入室しました。現在" + roomList[data2name] + "人");

        socket.set('room', data2name);
        socket.join(data2name);

        io.sockets.to(data2name).emit('message', data2name + "に入室しました");

        upDateRL(roomList);

      }else{
        console.log(data2name+ "番ルームは満員です。");
        //ルームが作られていて人数が満員の時
      }
    }
  });

  socket.on("disconnect", function () {
    //console.log("ウェブサイトから退室：現在" + count + "人");
    //io.sockets.emit("port", {value: count});
  });

  socket.on('chat message', function(room, msg){
    socket.join(room);
    console.log('room:' + room + ':msg:' + msg);
    io.in(room).emit('chat message', msg);
  });
});



/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
