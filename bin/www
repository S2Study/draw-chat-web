#!/usr/bin/env node

/**
 * Module dependencies.
 */
var debug = require('debug')('draw-chat-web:server');
var app = require('../app');
var http = require('http');
var models = require("../app/models");
var fs = require('fs');

/**
 * Get port from environment and store in Express.
 */
var port = normalizePort(process.env.PORT || 3000);
app.set('port', port);


/**
 * Create HTTP server.
 */
var server = http.createServer(app);

models.sequelize.sync().then(function() {
  /**
   * Listen on provided port, on all network interfaces.
   */
  //サーバーを立ち上げたら実行
  server.listen(app.get('port'), function() {
    console.log('listening!!! *:' + app.get('port'));
  });
});


server.on('error', onError);
server.on('listening', onListening);


//ソケットIOのモジュールを実行。（実はこの中でcreateServerしてlistenしている）
//サーバーをlistenしてsocketIOを設定
var io = require('socket.io')(server);

//socket処理を記載する
var roomList = new Object();
var memberList = new Object();


io.on('connection', function(socket){

  socket.on('init', function(room, name){
    console.log("init ########## " + socket.id);
    socket.join(room);
    memberList[socket.id] = room;
    var names = name || "匿名";
    io.in(room).emit("room in", {name: names});

    //console.log(memberList);
    //console.log(memberList[socket.id]);
    //console.log(socket.adapter.rooms[room].length);
    io.in(room).emit("room member", {value: socket.adapter.rooms[room].length});
  });

  socket.on("disconnect", function () {
    console.log("disconnect ########## " + socket.id);
    var room = memberList[socket.id];
    if(room && socket.adapter.rooms[room]){
      io.in(room).emit("room member", {value: socket.adapter.rooms[room].length});
      delete memberList[socket.id];
    }
  });

  socket.on('chat message', function(res){
    var room = memberList[socket.id];
    var user_id = socket.id;
    var names = res.name || "匿名";
    var message = res.message;

    saveMessage({
      room: room
      ,userId: user_id
      ,userName: names
      ,message: message
      ,fileNames: null
    });
  });

  socket.on('upload', function (data) {
    var room = memberList[socket.id];
    var userName = data.userName || "匿名";
    var userId = socket.id;

    var name = data.fileName || anonymous;
    var img = data.fileData;

    var imgStructure = img.split(',');
    var base64 = imgStructure[1];

    if (!base64) {
        console.log('fal to parse image');
    }

    var now = new Date().getTime();
    var fileNames = now + name;
    var outputPath = './public/upload/' + fileNames;
    var publicUrl = '/upload/' + fileNames;

    // データ保存
    fs.writeFile(
        outputPath,
        new Buffer(base64, 'base64'),
        function (err) {
            console.log(err);
        }
    );
    // DB保存
    saveMessage({
      room: room
      ,userId: userId
      ,userName: userName
      ,message: null
      ,fileNames: fileNames
    });
  });
});

function saveMessage(saveData){
  models.Groups
    .findOrCreate({where: {group_name: saveData.room}})
    .spread(function(group, created) {
      models.Messages.create({
        group_id: group.id
        ,user_id: saveData.userId
        ,user_name: saveData.userName
        ,message: saveData.message
        ,image_path: saveData.fileNames
      }).then(function(messageRecord) {
        console.log('room[' + saveData.room + ']name[' + messageRecord.user_name + ']msg[' + messageRecord.message + "]img[" + messageRecord.image_path + "]");
        resMsg = {
          id: messageRecord.id
          ,user_id: messageRecord.user_id
          ,user_name: messageRecord.user_name
          ,message: messageRecord.message
          ,image_path: messageRecord.image_path
          ,deleted: messageRecord.deleted
          ,stamp: messageRecord.createdAt
        };
        io.in(saveData.room).emit('chat message', resMsg);
      });
    });
}


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
